module Skelexcept where

-- Haskell module generated by the BNF converter

import Absexcept
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transUIdent :: UIdent -> Result
transUIdent x = case x of
  UIdent str  -> failure x


transLIdent :: LIdent -> Result
transLIdent x = case x of
  LIdent str  -> failure x


transWild :: Wild -> Result
transWild x = case x of
  Wild str  -> failure x


transExpr :: Expr -> Result
transExpr x = case x of
  EXCApplication expr exprs  -> failure x
  EXCTry expr exprs  -> failure x
  EXCRaise prompt expr  -> failure x
  EXCValue value  -> failure x


transValue :: Value -> Result
transValue x = case x of
  EXCAbstraction variations expr  -> failure x
  EXCSituation context  -> failure x
  EXCMention pattern  -> failure x
  EXCDelineation prompt  -> failure x


transContext :: Context -> Result
transContext x = case x of
  EXCLAppCtxt context exprs  -> failure x
  EXCRAppCtxt value context  -> failure x
  EXCLTryCtxt prompt context expr  -> failure x
  EXCRTryCtxt prompt expr context  -> failure x
  EXCRaiseCtxt prompt context  -> failure x


transPattern :: Pattern -> Result
transPattern x = case x of
  EXCElement symbol patterns  -> failure x
  EXCVariable variation  -> failure x
  EXCMaterialization groundvalue  -> failure x
  EXCProcession lyst  -> failure x


transVariation :: Variation -> Result
transVariation x = case x of
  EXCAtomic uident  -> failure x
  EXCAbandon wild  -> failure x
  EXCTranscription expr  -> failure x


transGroundValue :: GroundValue -> Result
transGroundValue x = case x of
  EXCBooleanLiteral duality  -> failure x
  EXCStringLiteral str  -> failure x
  EXCIntegerLiteral n  -> failure x
  EXCDoubleLiteral d  -> failure x
  EXCReification expr  -> failure x


transDuality :: Duality -> Result
transDuality x = case x of
  EXCVerity  -> failure x
  EXCAbsurdity  -> failure x


transLyst :: Lyst -> Result
transLyst x = case x of
  EXCEmpty  -> failure x
  EXCEnum patterns  -> failure x
  EXCCons patterns lyst  -> failure x
  EXCConsV patterns variation  -> failure x


transSymbol :: Symbol -> Result
transSymbol x = case x of
  EXCTag lident  -> failure x


transPrompt :: Prompt -> Result
transPrompt x = case x of
  EXCPrompt lident  -> failure x



