{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module Printexcept where

-- pretty-printer generated by the BNF converter

import Absexcept
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: [a] -> Doc
  prtList = concatD . map (prt 0)

instance Print a => Print [a] where
  prt _ = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)



instance Print UIdent where
  prt _ (UIdent i) = doc (showString ( i))


instance Print LIdent where
  prt _ (LIdent i) = doc (showString ( i))


instance Print Wild where
  prt _ (Wild i) = doc (showString ( i))



instance Print Expr where
  prt i e = case e of
   EXCApplication expr exprs -> prPrec i 0 (concatD [prt 0 expr , prt 1 exprs , doc (showString ";")])
   EXCTry expr exprs -> prPrec i 1 (concatD [doc (showString "try") , prt 1 expr , prt 2 exprs , doc (showString ";")])
   EXCRaise prompt expr -> prPrec i 2 (concatD [doc (showString "raise") , prt 0 prompt , prt 3 expr])
   EXCValue value -> prPrec i 3 (concatD [prt 0 value])

  prtList es = case es of
   [x] -> (concatD [prt 1 x])
   [x] -> (concatD [prt 2 x])
   x:xs -> (concatD [prt 1 x , prt 1 xs])
   x:xs -> (concatD [prt 2 x , prt 2 xs])

instance Print Value where
  prt i e = case e of
   EXCAbstraction variations expr -> prPrec i 0 (concatD [doc (showString "\\") , prt 0 variations , doc (showString "->") , prt 3 expr])
   EXCSituation context -> prPrec i 0 (concatD [doc (showString "@") , prt 0 context])
   EXCMention pattern -> prPrec i 0 (concatD [prt 0 pattern])
   EXCDelineation prompt -> prPrec i 0 (concatD [prt 0 prompt])


instance Print Context where
  prt i e = case e of
   EXCLAppCtxt context exprs -> prPrec i 0 (concatD [doc (showString "{") , prt 0 context , prt 2 exprs , doc (showString "}")])
   EXCRAppCtxt value context -> prPrec i 0 (concatD [doc (showString "{") , prt 0 value , prt 0 context , doc (showString "}")])
   EXCLTryCtxt prompt context expr -> prPrec i 0 (concatD [doc (showString "{") , doc (showString "try") , prt 0 prompt , prt 0 context , prt 3 expr , doc (showString "}")])
   EXCRTryCtxt prompt expr context -> prPrec i 0 (concatD [doc (showString "{") , doc (showString "try") , prt 0 prompt , prt 3 expr , prt 0 context , doc (showString "}")])
   EXCRaiseCtxt prompt context -> prPrec i 0 (concatD [doc (showString "{") , doc (showString "raise") , prt 0 prompt , prt 0 context , doc (showString "}")])


instance Print Pattern where
  prt i e = case e of
   EXCElement symbol patterns -> prPrec i 0 (concatD [prt 0 symbol , doc (showString "(") , prt 0 patterns , doc (showString ")")])
   EXCVariable variation -> prPrec i 0 (concatD [prt 0 variation])
   EXCMaterialization groundvalue -> prPrec i 0 (concatD [prt 0 groundvalue])
   EXCProcession lyst -> prPrec i 0 (concatD [prt 0 lyst])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print Variation where
  prt i e = case e of
   EXCAtomic uident -> prPrec i 0 (concatD [prt 0 uident])
   EXCAbandon wild -> prPrec i 0 (concatD [prt 0 wild])
   EXCTranscription expr -> prPrec i 0 (concatD [doc (showString "`") , prt 3 expr , doc (showString "'")])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print GroundValue where
  prt i e = case e of
   EXCBooleanLiteral duality -> prPrec i 0 (concatD [prt 0 duality])
   EXCStringLiteral str -> prPrec i 0 (concatD [prt 0 str])
   EXCIntegerLiteral n -> prPrec i 0 (concatD [prt 0 n])
   EXCDoubleLiteral d -> prPrec i 0 (concatD [prt 0 d])
   EXCReification expr -> prPrec i 0 (concatD [doc (showString "$") , prt 3 expr , doc (showString "$")])


instance Print Duality where
  prt i e = case e of
   EXCVerity  -> prPrec i 0 (concatD [doc (showString "true")])
   EXCAbsurdity  -> prPrec i 0 (concatD [doc (showString "false")])


instance Print Lyst where
  prt i e = case e of
   EXCEmpty  -> prPrec i 0 (concatD [doc (showString "[") , doc (showString "]")])
   EXCEnum patterns -> prPrec i 0 (concatD [doc (showString "[") , prt 0 patterns , doc (showString "]")])
   EXCCons patterns lyst -> prPrec i 0 (concatD [doc (showString "[") , prt 0 patterns , doc (showString "|") , prt 0 lyst , doc (showString "]")])
   EXCConsV patterns variation -> prPrec i 0 (concatD [doc (showString "[") , prt 0 patterns , doc (showString "|") , prt 0 variation , doc (showString "]")])


instance Print Symbol where
  prt i e = case e of
   EXCTag lident -> prPrec i 0 (concatD [prt 0 lident])


instance Print Prompt where
  prt i e = case e of
   EXCPrompt lident -> prPrec i 0 (concatD [doc (showString "%") , prt 0 lident , doc (showString "%")])



