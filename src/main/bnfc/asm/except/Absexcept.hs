module Absexcept where

-- Haskell module generated by the BNF converter


newtype UIdent = UIdent String deriving (Eq,Ord,Show)
newtype LIdent = LIdent String deriving (Eq,Ord,Show)
newtype Wild = Wild String deriving (Eq,Ord,Show)
data Expr =
   EXCApplication Expr [Expr]
 | EXCTry Expr [Expr]
 | EXCRaise Prompt Expr
 | EXCValue Value
  deriving (Eq,Ord,Show)

data Value =
   EXCAbstraction [Variation] Expr
 | EXCSituation Context
 | EXCMention Pattern
 | EXCDelineation Prompt
  deriving (Eq,Ord,Show)

data Context =
   EXCLAppCtxt Context [Expr]
 | EXCRAppCtxt Value Context
 | EXCLTryCtxt Prompt Context Expr
 | EXCRTryCtxt Prompt Expr Context
 | EXCRaiseCtxt Prompt Context
  deriving (Eq,Ord,Show)

data Pattern =
   EXCElement Symbol [Pattern]
 | EXCVariable Variation
 | EXCMaterialization GroundValue
 | EXCProcession Lyst
  deriving (Eq,Ord,Show)

data Variation =
   EXCAtomic UIdent
 | EXCAbandon Wild
 | EXCTranscription Expr
  deriving (Eq,Ord,Show)

data GroundValue =
   EXCBooleanLiteral Duality
 | EXCStringLiteral String
 | EXCIntegerLiteral Integer
 | EXCDoubleLiteral Double
 | EXCReification Expr
  deriving (Eq,Ord,Show)

data Duality =
   EXCVerity
 | EXCAbsurdity
  deriving (Eq,Ord,Show)

data Lyst =
   EXCEmpty
 | EXCEnum [Pattern]
 | EXCCons [Pattern] Lyst
 | EXCConsV [Pattern] Variation
  deriving (Eq,Ord,Show)

data Symbol =
   EXCTag LIdent
  deriving (Eq,Ord,Show)

data Prompt =
   EXCPrompt LIdent
  deriving (Eq,Ord,Show)

