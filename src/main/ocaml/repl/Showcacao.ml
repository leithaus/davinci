(* show functions generated by the BNF converter *)

open Abscacao

(* use string buffers for efficient string concatenations *)
type showable = Buffer.t -> unit

let show (s : showable) : string = 
    let init_size = 16 in (* you may want to adjust this *)
    let b = Buffer.create init_size in
    s b;
    Buffer.contents b
    
let emptyS : showable = fun buf -> ()

let c2s (c:char) : showable = fun buf -> Buffer.add_char buf c
let s2s (s:string) : showable = fun buf -> Buffer.add_string buf s

let ( >> ) (s1 : showable) (s2 : showable) : showable = fun buf -> s1 buf; s2 buf

let showChar (c:char) : showable = fun buf -> 
    Buffer.add_string buf ("'" ^ Char.escaped c ^ "'")

let showString (s:string) : showable = fun buf -> 
    Buffer.add_string buf ("\"" ^ String.escaped s ^ "\"")

let showList (showFun : 'a -> showable) (xs : 'a list) : showable = fun buf -> 
    let rec f ys = match ys with
        [] -> ()
      | [y] -> showFun y buf
      | y::ys -> showFun y buf; Buffer.add_string buf "; "; f ys 
    in
        Buffer.add_char buf '[';
        f xs;
        Buffer.add_char buf ']'


let showInt (i:int) : showable = s2s (string_of_int i)
let showFloat (f:float) : showable = s2s (string_of_float f)

let rec showUIdent (UIdent i) : showable = s2s "UIdent " >> showString i

let rec showLIdent (LIdent i) : showable = s2s "LIdent " >> showString i

let rec showWild (Wild i) : showable = s2s "Wild " >> showString i


let rec showRequest (e:request) : showable = match e with
       Evaluation expr -> s2s "Evaluation" >> c2s ' ' >> c2s '(' >> showExpr expr >> c2s ')'
  |    TypeCheck (expr, type') -> s2s "TypeCheck" >> c2s ' ' >> c2s '(' >> showExpr expr  >> s2s ", " >>  showTypeT type' >> c2s ')'
  |    ModelCheck (expr, form) -> s2s "ModelCheck" >> c2s ' ' >> c2s '(' >> showExpr expr  >> s2s ", " >>  showForm form >> c2s ')'
  |    OuterShell outershellrequest -> s2s "OuterShell" >> c2s ' ' >> c2s '(' >> showOuterShellRequest outershellrequest >> c2s ')'
  |    InnerShell innershellrequest -> s2s "InnerShell" >> c2s ' ' >> c2s '(' >> showInnerShellRequest innershellrequest >> c2s ')'


and showExpr (e:expr) : showable = match e with
       Sequence (expr0, expr) -> s2s "Sequence" >> c2s ' ' >> c2s '(' >> showExpr expr0  >> s2s ", " >>  showExpr expr >> c2s ')'
  |    Application (expr, exprs) -> s2s "Application" >> c2s ' ' >> c2s '(' >> showExpr expr  >> s2s ", " >>  showList showExpr exprs >> c2s ')'
  |    Supposition (pattern, expr0, expr) -> s2s "Supposition" >> c2s ' ' >> c2s '(' >> showPattern pattern  >> s2s ", " >>  showExpr expr0  >> s2s ", " >>  showExpr expr >> c2s ')'
  |    Recurrence (pattern, expr0, expr) -> s2s "Recurrence" >> c2s ' ' >> c2s '(' >> showPattern pattern  >> s2s ", " >>  showExpr expr0  >> s2s ", " >>  showExpr expr >> c2s ')'
  |    Abstraction (pattern, expr) -> s2s "Abstraction" >> c2s ' ' >> c2s '(' >> showPattern pattern  >> s2s ", " >>  showExpr expr >> c2s ')'
  |    Condition (expr0, expr1, expr) -> s2s "Condition" >> c2s ' ' >> c2s '(' >> showExpr expr0  >> s2s ", " >>  showExpr expr1  >> s2s ", " >>  showExpr expr >> c2s ')'
  |    Comprehension (bindings, expr) -> s2s "Comprehension" >> c2s ' ' >> c2s '(' >> showList showBinding bindings  >> s2s ", " >>  showExpr expr >> c2s ')'
  |    Consolidation (bindings, expr) -> s2s "Consolidation" >> c2s ' ' >> c2s '(' >> showList showBinding bindings  >> s2s ", " >>  showExpr expr >> c2s ')'
  |    Filtration (bindings, patterns, expr) -> s2s "Filtration" >> c2s ' ' >> c2s '(' >> showList showBinding bindings  >> s2s ", " >>  showList showPattern patterns  >> s2s ", " >>  showExpr expr >> c2s ')'
  |    Concentration (bindings, patterns, expr) -> s2s "Concentration" >> c2s ' ' >> c2s '(' >> showList showBinding bindings  >> s2s ", " >>  showList showPattern patterns  >> s2s ", " >>  showExpr expr >> c2s ')'
  |    Equation (expr0, expr) -> s2s "Equation" >> c2s ' ' >> c2s '(' >> showExpr expr0  >> s2s ", " >>  showExpr expr >> c2s ')'
  |    ComparisonLT (expr0, expr) -> s2s "ComparisonLT" >> c2s ' ' >> c2s '(' >> showExpr expr0  >> s2s ", " >>  showExpr expr >> c2s ')'
  |    ComparisonGT (expr0, expr) -> s2s "ComparisonGT" >> c2s ' ' >> c2s '(' >> showExpr expr0  >> s2s ", " >>  showExpr expr >> c2s ')'
  |    ComparisonLTE (expr0, expr) -> s2s "ComparisonLTE" >> c2s ' ' >> c2s '(' >> showExpr expr0  >> s2s ", " >>  showExpr expr >> c2s ')'
  |    ComparisonGTE (expr0, expr) -> s2s "ComparisonGTE" >> c2s ' ' >> c2s '(' >> showExpr expr0  >> s2s ", " >>  showExpr expr >> c2s ')'
  |    Reflection variation -> s2s "Reflection" >> c2s ' ' >> c2s '(' >> showVariation variation >> c2s ')'
  |    Acquisition  -> s2s "Acquisition" 
  |    Suspension (expr0, expr) -> s2s "Suspension" >> c2s ' ' >> c2s '(' >> showExpr expr0  >> s2s ", " >>  showExpr expr >> c2s ')'
  |    Release (expr0, expr) -> s2s "Release" >> c2s ' ' >> c2s '(' >> showExpr expr0  >> s2s ", " >>  showExpr expr >> c2s ')'
  |    InnerSuspension (expr0, expr) -> s2s "InnerSuspension" >> c2s ' ' >> c2s '(' >> showExpr expr0  >> s2s ", " >>  showExpr expr >> c2s ')'
  |    Calculation arithmeticexpr -> s2s "Calculation" >> c2s ' ' >> c2s '(' >> showArithmeticExpr arithmeticexpr >> c2s ')'


and showArithmeticExpr (e:arithmeticExpr) : showable = match e with
       Division (arithmeticexpr0, arithmeticexpr) -> s2s "Division" >> c2s ' ' >> c2s '(' >> showArithmeticExpr arithmeticexpr0  >> s2s ", " >>  showArithmeticExpr arithmeticexpr >> c2s ')'
  |    Addition (arithmeticexpr0, arithmeticexpr) -> s2s "Addition" >> c2s ' ' >> c2s '(' >> showArithmeticExpr arithmeticexpr0  >> s2s ", " >>  showArithmeticExpr arithmeticexpr >> c2s ')'
  |    Multiplication (arithmeticexpr0, arithmeticexpr) -> s2s "Multiplication" >> c2s ' ' >> c2s '(' >> showArithmeticExpr arithmeticexpr0  >> s2s ", " >>  showArithmeticExpr arithmeticexpr >> c2s ')'
  |    Juxtaposition (arithmeticexpr0, arithmeticexpr) -> s2s "Juxtaposition" >> c2s ' ' >> c2s '(' >> showArithmeticExpr arithmeticexpr0  >> s2s ", " >>  showArithmeticExpr arithmeticexpr >> c2s ')'
  |    Negation arithmeticexpr -> s2s "Negation" >> c2s ' ' >> c2s '(' >> showArithmeticExpr arithmeticexpr >> c2s ')'
  |    Mention variation -> s2s "Mention" >> c2s ' ' >> c2s '(' >> showVariation variation >> c2s ')'
  |    Actualization value -> s2s "Actualization" >> c2s ' ' >> c2s '(' >> showValue value >> c2s ')'
  |    Aggregation expr -> s2s "Aggregation" >> c2s ' ' >> c2s '(' >> showExpr expr >> c2s ')'


and showBinding (e:binding) : showable = match e with
       Question (pattern, expr) -> s2s "Question" >> c2s ' ' >> c2s '(' >> showPattern pattern  >> s2s ", " >>  showExpr expr >> c2s ')'


and showPattern (e:pattern) : showable = match e with
       Element (symbol, patterns) -> s2s "Element" >> c2s ' ' >> c2s '(' >> showSymbol symbol  >> s2s ", " >>  showList showPattern patterns >> c2s ')'
  |    Variable variation -> s2s "Variable" >> c2s ' ' >> c2s '(' >> showVariation variation >> c2s ')'
  |    Materialization value -> s2s "Materialization" >> c2s ' ' >> c2s '(' >> showValue value >> c2s ')'
  |    Procession lyst -> s2s "Procession" >> c2s ' ' >> c2s '(' >> showLyst lyst >> c2s ')'
  |    PtnSequence variation -> s2s "PtnSequence" >> c2s ' ' >> c2s '(' >> showVariation variation >> c2s ')'
  |    PtnApplication (variation0, variation) -> s2s "PtnApplication" >> c2s ' ' >> c2s '(' >> showVariation variation0  >> s2s ", " >>  showVariation variation >> c2s ')'
  |    PtnSupposition (variation0, variation1, variation) -> s2s "PtnSupposition" >> c2s ' ' >> c2s '(' >> showVariation variation0  >> s2s ", " >>  showVariation variation1  >> s2s ", " >>  showVariation variation >> c2s ')'
  |    PtnRecurrence (variation0, variation1, variation) -> s2s "PtnRecurrence" >> c2s ' ' >> c2s '(' >> showVariation variation0  >> s2s ", " >>  showVariation variation1  >> s2s ", " >>  showVariation variation >> c2s ')'
  |    PtnAbstraction (variation0, variation) -> s2s "PtnAbstraction" >> c2s ' ' >> c2s '(' >> showVariation variation0  >> s2s ", " >>  showVariation variation >> c2s ')'
  |    PtnCondition (variation0, variation1, variation) -> s2s "PtnCondition" >> c2s ' ' >> c2s '(' >> showVariation variation0  >> s2s ", " >>  showVariation variation1  >> s2s ", " >>  showVariation variation >> c2s ')'
  |    PtnComprehend (variation0, variation) -> s2s "PtnComprehend" >> c2s ' ' >> c2s '(' >> showVariation variation0  >> s2s ", " >>  showVariation variation >> c2s ')'
  |    PtnConsolidate (variation0, variation) -> s2s "PtnConsolidate" >> c2s ' ' >> c2s '(' >> showVariation variation0  >> s2s ", " >>  showVariation variation >> c2s ')'
  |    PtnFiltration (variation0, variation1, variation) -> s2s "PtnFiltration" >> c2s ' ' >> c2s '(' >> showVariation variation0  >> s2s ", " >>  showVariation variation1  >> s2s ", " >>  showVariation variation >> c2s ')'
  |    PtnConcentrate (variation0, variation1, variation) -> s2s "PtnConcentrate" >> c2s ' ' >> c2s '(' >> showVariation variation0  >> s2s ", " >>  showVariation variation1  >> s2s ", " >>  showVariation variation >> c2s ')'
  |    PtnEquation (variation0, variation) -> s2s "PtnEquation" >> c2s ' ' >> c2s '(' >> showVariation variation0  >> s2s ", " >>  showVariation variation >> c2s ')'
  |    PtnCompLT (variation0, variation) -> s2s "PtnCompLT" >> c2s ' ' >> c2s '(' >> showVariation variation0  >> s2s ", " >>  showVariation variation >> c2s ')'
  |    PtnCompGT (variation0, variation) -> s2s "PtnCompGT" >> c2s ' ' >> c2s '(' >> showVariation variation0  >> s2s ", " >>  showVariation variation >> c2s ')'
  |    PtnCompLTE (variation0, variation) -> s2s "PtnCompLTE" >> c2s ' ' >> c2s '(' >> showVariation variation0  >> s2s ", " >>  showVariation variation >> c2s ')'
  |    PtnCompGTE (variation0, variation) -> s2s "PtnCompGTE" >> c2s ' ' >> c2s '(' >> showVariation variation0  >> s2s ", " >>  showVariation variation >> c2s ')'
  |    PtnReflection (variation0, variation) -> s2s "PtnReflection" >> c2s ' ' >> c2s '(' >> showVariation variation0  >> s2s ", " >>  showVariation variation >> c2s ')'
  |    PtnAcquisition  -> s2s "PtnAcquisition" 
  |    PtnSuspension (variation0, variation) -> s2s "PtnSuspension" >> c2s ' ' >> c2s '(' >> showVariation variation0  >> s2s ", " >>  showVariation variation >> c2s ')'
  |    PtnRelease (variation0, variation) -> s2s "PtnRelease" >> c2s ' ' >> c2s '(' >> showVariation variation0  >> s2s ", " >>  showVariation variation >> c2s ')'
  |    PtnInnerSuspend (variation0, variation) -> s2s "PtnInnerSuspend" >> c2s ' ' >> c2s '(' >> showVariation variation0  >> s2s ", " >>  showVariation variation >> c2s ')'
  |    PtnDivision (variation0, variation) -> s2s "PtnDivision" >> c2s ' ' >> c2s '(' >> showVariation variation0  >> s2s ", " >>  showVariation variation >> c2s ')'
  |    PtnAddition (variation0, variation) -> s2s "PtnAddition" >> c2s ' ' >> c2s '(' >> showVariation variation0  >> s2s ", " >>  showVariation variation >> c2s ')'
  |    PtnMultiply (variation0, variation) -> s2s "PtnMultiply" >> c2s ' ' >> c2s '(' >> showVariation variation0  >> s2s ", " >>  showVariation variation >> c2s ')'
  |    PtnJuxtapose (variation0, variation) -> s2s "PtnJuxtapose" >> c2s ' ' >> c2s '(' >> showVariation variation0  >> s2s ", " >>  showVariation variation >> c2s ')'
  |    PtnNegate (variation0, variation) -> s2s "PtnNegate" >> c2s ' ' >> c2s '(' >> showVariation variation0  >> s2s ", " >>  showVariation variation >> c2s ')'


and showVariation (e:variation) : showable = match e with
       Atomic uident -> s2s "Atomic" >> c2s ' ' >> c2s '(' >> showUIdent uident >> c2s ')'
  |    Abandon wild -> s2s "Abandon" >> c2s ' ' >> c2s '(' >> showWild wild >> c2s ')'
  |    Transcription expr -> s2s "Transcription" >> c2s ' ' >> c2s '(' >> showExpr expr >> c2s ')'


and showLyst (e:lyst) : showable = match e with
       Empty  -> s2s "Empty" 
  |    Enum patterns -> s2s "Enum" >> c2s ' ' >> c2s '(' >> showList showPattern patterns >> c2s ')'
  |    Cons (patterns, lyst) -> s2s "Cons" >> c2s ' ' >> c2s '(' >> showList showPattern patterns  >> s2s ", " >>  showLyst lyst >> c2s ')'
  |    ConsV (patterns, variation) -> s2s "ConsV" >> c2s ' ' >> c2s '(' >> showList showPattern patterns  >> s2s ", " >>  showVariation variation >> c2s ')'


and showValue (e:value) : showable = match e with
       BooleanLiteral duality -> s2s "BooleanLiteral" >> c2s ' ' >> c2s '(' >> showDuality duality >> c2s ')'
  |    StringLiteral str -> s2s "StringLiteral" >> c2s ' ' >> c2s '(' >> showString str >> c2s ')'
  |    IntegerLiteral n -> s2s "IntegerLiteral" >> c2s ' ' >> c2s '(' >> showInt n >> c2s ')'
  |    DoubleLiteral d -> s2s "DoubleLiteral" >> c2s ' ' >> c2s '(' >> showFloat d >> c2s ')'
  |    Reification expr -> s2s "Reification" >> c2s ' ' >> c2s '(' >> showExpr expr >> c2s ')'


and showDuality (e:duality) : showable = match e with
       Verity  -> s2s "Verity" 
  |    Absurdity  -> s2s "Absurdity" 


and showSymbol (e:symbol) : showable = match e with
       Tag lident -> s2s "Tag" >> c2s ' ' >> c2s '(' >> showLIdent lident >> c2s ')'


and showTypeT (e:typeT) : showable = match e with
       ProductType (type'0, type') -> s2s "ProductType" >> c2s ' ' >> c2s '(' >> showTypeT type'0  >> s2s ", " >>  showTypeT type' >> c2s ')'
  |    AbstractionType typeabstraction -> s2s "AbstractionType" >> c2s ' ' >> c2s '(' >> showTypeAbstraction typeabstraction >> c2s ')'
  |    ApplicationType typeapplication -> s2s "ApplicationType" >> c2s ' ' >> c2s '(' >> showTypeApplication typeapplication >> c2s ')'
  |    FunctionType (type'0, type') -> s2s "FunctionType" >> c2s ' ' >> c2s '(' >> showTypeT type'0  >> s2s ", " >>  showTypeT type' >> c2s ')'
  |    UserDefinedType lident -> s2s "UserDefinedType" >> c2s ' ' >> c2s '(' >> showLIdent lident >> c2s ')'
  |    GroundType gtype -> s2s "GroundType" >> c2s ' ' >> c2s '(' >> showGType gtype >> c2s ')'
  |    StructuralType structuretype -> s2s "StructuralType" >> c2s ' ' >> c2s '(' >> showStructureType structuretype >> c2s ')'


and showTypeAbstraction (e:typeAbstraction) : showable = match e with
       TypeListFormals (typevars, type') -> s2s "TypeListFormals" >> c2s ' ' >> c2s '(' >> showList showTypeVar typevars  >> s2s ", " >>  showTypeT type' >> c2s ')'


and showTypeApplication (e:typeApplication) : showable = match e with
       TypeListActuals (types, type') -> s2s "TypeListActuals" >> c2s ' ' >> c2s '(' >> showList showTypeT types  >> s2s ", " >>  showTypeT type' >> c2s ')'


and showTypeVar (e:typeVar) : showable = match e with
       AtomicTypeVar lident -> s2s "AtomicTypeVar" >> c2s ' ' >> c2s '(' >> showLIdent lident >> c2s ')'
  |    TermTypeVar type' -> s2s "TermTypeVar" >> c2s ' ' >> c2s '(' >> showTypeT type' >> c2s ')'


and showStructureType (e:structureType) : showable = match e with
       ReflectionType type' -> s2s "ReflectionType" >> c2s ' ' >> c2s '(' >> showTypeT type' >> c2s ')'
  |    AggregationType type' -> s2s "AggregationType" >> c2s ' ' >> c2s '(' >> showTypeT type' >> c2s ')'


and showGType (e:gType) : showable = match e with
       BooleanType  -> s2s "BooleanType" 
  |    StringType  -> s2s "StringType" 
  |    IntegerType  -> s2s "IntegerType" 
  |    FloatType  -> s2s "FloatType" 


and showForm (e:form) : showable = match e with
       ConjunctiveForm (form0, form) -> s2s "ConjunctiveForm" >> c2s ' ' >> c2s '(' >> showForm form0  >> s2s ", " >>  showForm form >> c2s ')'
  |    DisjunctiveForm (form0, form) -> s2s "DisjunctiveForm" >> c2s ' ' >> c2s '(' >> showForm form0  >> s2s ", " >>  showForm form >> c2s ')'
  |    ImplicativeForm (form0, form) -> s2s "ImplicativeForm" >> c2s ' ' >> c2s '(' >> showForm form0  >> s2s ", " >>  showForm form >> c2s ')'
  |    ProductiveForm (form0, form) -> s2s "ProductiveForm" >> c2s ' ' >> c2s '(' >> showForm form0  >> s2s ", " >>  showForm form >> c2s ')'
  |    AbstractionForm (formformals, form) -> s2s "AbstractionForm" >> c2s ' ' >> c2s '(' >> showFormFormals formformals  >> s2s ", " >>  showForm form >> c2s ')'
  |    ProbativeForm (form0, form) -> s2s "ProbativeForm" >> c2s ' ' >> c2s '(' >> showForm form0  >> s2s ", " >>  showForm form >> c2s ')'
  |    RecursiveForm (uident, form) -> s2s "RecursiveForm" >> c2s ' ' >> c2s '(' >> showUIdent uident  >> s2s ", " >>  showForm form >> c2s ')'
  |    ReflectionForm form -> s2s "ReflectionForm" >> c2s ' ' >> c2s '(' >> showForm form >> c2s ')'
  |    NegativeForm form -> s2s "NegativeForm" >> c2s ' ' >> c2s '(' >> showForm form >> c2s ')'
  |    ReferentialForm uident -> s2s "ReferentialForm" >> c2s ' ' >> c2s '(' >> showUIdent uident >> c2s ')'
  |    UserDefinedForm lident -> s2s "UserDefinedForm" >> c2s ' ' >> c2s '(' >> showLIdent lident >> c2s ')'
  |    GroundForm gform -> s2s "GroundForm" >> c2s ' ' >> c2s '(' >> showGForm gform >> c2s ')'


and showFormFormals (e:formFormals) : showable = match e with
       FormOneFormal formvar -> s2s "FormOneFormal" >> c2s ' ' >> c2s '(' >> showFormVar formvar >> c2s ')'
  |    FormListFormals formvars -> s2s "FormListFormals" >> c2s ' ' >> c2s '(' >> showList showFormVar formvars >> c2s ')'


and showFormVar (e:formVar) : showable = match e with
       AtomicFormVar lident -> s2s "AtomicFormVar" >> c2s ' ' >> c2s '(' >> showLIdent lident >> c2s ')'
  |    TermFormVar form -> s2s "TermFormVar" >> c2s ' ' >> c2s '(' >> showForm form >> c2s ')'


and showGForm (e:gForm) : showable = match e with
       VerityForm  -> s2s "VerityForm" 
  |    AbsurdityForm  -> s2s "AbsurdityForm" 
  |    BooleanForm  -> s2s "BooleanForm" 
  |    StringForm  -> s2s "StringForm" 
  |    IntegerForm  -> s2s "IntegerForm" 
  |    FloatForm  -> s2s "FloatForm" 


and showOuterShellRequest (e:outerShellRequest) : showable = match e with
       EscapeRequest str -> s2s "EscapeRequest" >> c2s ' ' >> c2s '(' >> showString str >> c2s ')'
  |    PwdRequest  -> s2s "PwdRequest" 
  |    CdRequest  -> s2s "CdRequest" 


and showInnerShellRequest (e:innerShellRequest) : showable = match e with
       ExitRequest  -> s2s "ExitRequest" 
  |    TypeRequest  -> s2s "TypeRequest" 
  |    DesugarRequest  -> s2s "DesugarRequest" 
  |    ParseRequest  -> s2s "ParseRequest" 



