(* pretty-printer generated by the BNF converter *)

open Abscacao
open Printf

(* We use string buffers for efficient string concatenation.
   A document takes a buffer and an indentation, has side effects on the buffer
   and returns a new indentation. The indentation argument indicates the level
   of indentation to be used if a new line has to be started (because of what is
   already in the buffer) *)
type doc = Buffer.t -> int -> int

let rec printTree (printer : int -> 'a -> doc) (tree : 'a) : string = 
    let buffer_init_size = 16 (* you may want to change this *)
    in let buffer = Buffer.create buffer_init_size
    in 
        let _ = printer 0 tree buffer 0 in (* discard return value *)
        Buffer.contents buffer

let indent_width = 4

let indent (i: int) : string = 
    let s = String.make (i+1) ' ' in
    String.set s 0 '\n';
    s

(* this render function is written for C-style languages, you may want to change it *)
let render (s : string) : doc = fun buf i -> 
    (* invariant: last char of the buffer is never whitespace *)
    let n = Buffer.length buf in
    let last = if n = 0 then None else Some (Buffer.nth buf (n-1)) in
    let whitespace = match last with
        None -> "" 
      | Some '{' -> indent i
      | Some '}' -> (match s with
            ";" -> ""
          | _ -> indent i)
      | Some ';' -> indent i
      | (Some '[') |  (Some '(') -> ""
      | Some _ -> (match s with
            "," | ")" | "]" -> ""
           | _ -> " ") in
    let newindent = match s with
        "{" -> i + indent_width
      | "}" -> i - indent_width
      | _ -> i in
    Buffer.add_string buf whitespace;
    Buffer.add_string buf s;
    newindent

let emptyDoc : doc = fun buf i -> i

let concatD (ds : doc list) : doc = fun buf i -> 
    List.fold_left (fun accIndent elemDoc -> elemDoc buf accIndent) (emptyDoc buf i) ds

let parenth (d:doc) : doc = concatD [render "("; d; render ")"]

let prPrec (i:int) (j:int) (d:doc) : doc = if j<i then parenth d else d


let rec prtChar (_:int) (c:char) : doc = render ("'" ^ Char.escaped c ^ "'")



let rec prtInt (_:int) (i:int) : doc = render (string_of_int i)



let rec prtFloat (_:int) (f:float) : doc = render (sprintf "%f" f)



let rec prtString (_:int) (s:string) : doc = render ("\"" ^ String.escaped s ^ "\"")




let rec prtUIdent _ (UIdent i) : doc = render i


let rec prtLIdent _ (LIdent i) : doc = render i


let rec prtWild _ (Wild i) : doc = render i



let rec prtExpr (i:int) (e:expr) : doc = match e with
       Sequence (expr0, expr) -> prPrec i 0 (concatD [prtExpr 0 expr0 ; render ";" ; prtExpr 1 expr])
  |    Application (expr, exprs) -> prPrec i 1 (concatD [prtExpr 1 expr ; prtExprListBNFC 2 exprs ; render ";;"])
  |    Supposition (pattern, expr0, expr) -> prPrec i 2 (concatD [render "let" ; prtPattern 0 pattern ; render "=" ; prtExpr 2 expr0 ; render "in" ; prtExpr 3 expr])
  |    Recurrence (pattern, expr0, expr) -> prPrec i 2 (concatD [render "let" ; render "rec" ; prtPattern 0 pattern ; render "=" ; prtExpr 2 expr0 ; render "in" ; prtExpr 3 expr])
  |    Abstraction (pattern, expr) -> prPrec i 3 (concatD [render "fun" ; prtPattern 0 pattern ; render "->" ; prtExpr 4 expr])
  |    Condition (expr0, expr1, expr) -> prPrec i 4 (concatD [render "if" ; prtExpr 4 expr0 ; render "then" ; prtExpr 5 expr1 ; render "else" ; prtExpr 5 expr])
  |    Comprehension (bindings, expr) -> prPrec i 4 (concatD [render "for" ; render "(" ; prtBindingListBNFC 0 bindings ; render ")" ; prtExpr 5 expr])
  |    Filtration (bindings, patterns, expr) -> prPrec i 4 (concatD [render "for" ; render "(" ; prtBindingListBNFC 0 bindings ; render "|" ; prtPatternListBNFC 0 patterns ; render ")" ; prtExpr 5 expr])
  |    Equation (expr0, expr) -> prPrec i 4 (concatD [prtExpr 5 expr0 ; render "=" ; prtExpr 5 expr])
  |    ComparisonLT (expr0, expr) -> prPrec i 4 (concatD [prtExpr 5 expr0 ; render "<" ; prtExpr 5 expr])
  |    ComparisonGT (expr0, expr) -> prPrec i 4 (concatD [prtExpr 5 expr0 ; render ">" ; prtExpr 5 expr])
  |    ComparisonLTE (expr0, expr) -> prPrec i 4 (concatD [prtExpr 5 expr0 ; render "<=" ; prtExpr 5 expr])
  |    ComparisonGTE (expr0, expr) -> prPrec i 4 (concatD [prtExpr 5 expr0 ; render ">=" ; prtExpr 5 expr])
  |    Calculation arithmeticexpr -> prPrec i 5 (concatD [prtArithmeticExpr 0 arithmeticexpr])

and prtExprListBNFC _ es : doc = match es with
  | [x]   -> (concatD [prtExpr 2 x])
  | x::xs -> (concatD [prtExpr 2 x ; prtExprListBNFC 2 xs])

and prtArithmeticExpr (i:int) (e:arithmeticExpr) : doc = match e with
       Division (arithmeticexpr0, arithmeticexpr) -> prPrec i 0 (concatD [prtArithmeticExpr 0 arithmeticexpr0 ; render "/" ; prtArithmeticExpr 1 arithmeticexpr])
  |    Addition (arithmeticexpr0, arithmeticexpr) -> prPrec i 1 (concatD [prtArithmeticExpr 1 arithmeticexpr0 ; render "+" ; prtArithmeticExpr 2 arithmeticexpr])
  |    Multiplication (arithmeticexpr0, arithmeticexpr) -> prPrec i 2 (concatD [prtArithmeticExpr 2 arithmeticexpr0 ; render "*" ; prtArithmeticExpr 3 arithmeticexpr])
  |    Juxtaposition (arithmeticexpr0, arithmeticexpr) -> prPrec i 3 (concatD [prtArithmeticExpr 3 arithmeticexpr0 ; render "::" ; prtArithmeticExpr 4 arithmeticexpr])
  |    Negation arithmeticexpr -> prPrec i 4 (concatD [render "-" ; prtArithmeticExpr 5 arithmeticexpr])
  |    Mention variation -> prPrec i 5 (concatD [prtVariation 0 variation])
  |    Actualization value -> prPrec i 5 (concatD [prtValue 0 value])


and prtBinding (i:int) (e:binding) : doc = match e with
       Question (pattern, expr) -> prPrec i 0 (concatD [prtPattern 0 pattern ; render "<-" ; prtExpr 5 expr])

and prtBindingListBNFC _ es : doc = match es with
    []    -> (concatD [])
  | [x]   -> (concatD [prtBinding 0 x])
  | x::xs -> (concatD [prtBinding 0 x ; render "," ; prtBindingListBNFC 0 xs])

and prtPattern (i:int) (e:pattern) : doc = match e with
       Element (symbol, patterns) -> prPrec i 0 (concatD [prtSymbol 0 symbol ; render "(" ; prtPatternListBNFC 0 patterns ; render ")"])
  |    Variable variation -> prPrec i 0 (concatD [prtVariation 0 variation])
  |    Materialization value -> prPrec i 0 (concatD [prtValue 0 value])
  |    Procession lyst -> prPrec i 0 (concatD [prtLyst 0 lyst])

and prtPatternListBNFC _ es : doc = match es with
  | [x]   -> (concatD [prtPattern 0 x])
  | x::xs -> (concatD [prtPattern 0 x ; render "," ; prtPatternListBNFC 0 xs])

and prtVariation (i:int) (e:variation) : doc = match e with
       Atomic uident -> prPrec i 0 (concatD [prtUIdent 0 uident])
  |    Abandon wild -> prPrec i 0 (concatD [prtWild 0 wild])
  |    Transcription expr -> prPrec i 0 (concatD [render "`" ; prtExpr 0 expr ; render "'"])


and prtLyst (i:int) (e:lyst) : doc = match e with
       Empty  -> prPrec i 0 (concatD [render "[" ; render "]"])
  |    Enum patterns -> prPrec i 0 (concatD [render "[" ; prtPatternListBNFC 0 patterns ; render "]"])
  |    Cons (patterns, lyst) -> prPrec i 0 (concatD [render "[" ; prtPatternListBNFC 0 patterns ; render "|" ; prtLyst 0 lyst ; render "]"])
  |    ConsV (patterns, variation) -> prPrec i 0 (concatD [render "[" ; prtPatternListBNFC 0 patterns ; render "|" ; prtVariation 0 variation ; render "]"])


and prtValue (i:int) (e:value) : doc = match e with
       BooleanLiteral duality -> prPrec i 0 (concatD [prtDuality 0 duality])
  |    StringLiteral str -> prPrec i 0 (concatD [prtString 0 str])
  |    IntegerLiteral n -> prPrec i 0 (concatD [prtInt 0 n])
  |    DoubleLiteral d -> prPrec i 0 (concatD [prtFloat 0 d])
  |    Reification expr -> prPrec i 0 (concatD [render "$" ; prtExpr 0 expr ; render "$"])


and prtDuality (i:int) (e:duality) : doc = match e with
       Verity  -> prPrec i 0 (concatD [render "true"])
  |    Absurdity  -> prPrec i 0 (concatD [render "false"])


and prtSymbol (i:int) (e:symbol) : doc = match e with
       Tag lident -> prPrec i 0 (concatD [prtLIdent 0 lident])



