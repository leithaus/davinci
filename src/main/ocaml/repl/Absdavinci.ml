(* OCaml module generated by the BNF converter *)


type uIdent = UIdent of string
and lIdent = LIdent of string
and wild = Wild of string
and agent =
   Composition of agent list
 | Superposition of guardedAgent list
 | Replication of channel
 | Reception of binding list * agent
 | Filtration of binding list * pattern list * agent
 | Intimation of variation * concretion
 | Transmission of variation * concretion
 | Actualization of value

and guardedAgent =
   Injection of pattern * agent

and abstraction =
   Applicant of variation * agent

and concretion =
   Applicand of information

and binding =
   Question of pattern * channel * pattern
 | Interrogation of pattern * channel * pattern

and pattern =
   Element of symbol * pattern list
 | Variable of variation
 | Materialization of value
 | Procession of lyst

and channel =
   Identification of lIdent
 | Nomination of variation
 | Transcription of agent

and symbol =
   Tag of lIdent

and variation =
   Atomic of uIdent

and information =
   Indirection of variation
 | Reflection of agent

and lyst =
   Empty
 | Enum of pattern list
 | Cons of pattern list * lyst
 | ConsV of pattern list * variation

and value =
   BooleanLiteral of duality
 | StringLiteral of string
 | IntegerLiteral of int
 | DoubleLiteral of float
 | Reification of agent

and duality =
   Verity
 | Absurdity

