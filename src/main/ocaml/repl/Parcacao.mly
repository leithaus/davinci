/* This ocamlyacc file was machine-generated by the BNF converter */
%{
open Abscacao
open Lexing
%}

%token TOK_F TOK_T TOK_bool TOK_else TOK_false TOK_float TOK_from TOK_fun TOK_if TOK_in TOK_int TOK_let TOK_newP TOK_pushP TOK_pushSC TOK_rec TOK_string TOK_takeSC TOK_then TOK_true TOK_yield

%token SYMB1 /* |- */
%token SYMB2 /* : */
%token SYMB3 /* |= */
%token SYMB4 /* :! */
%token SYMB5 /* ; */
%token SYMB6 /* ;; */
%token SYMB7 /* = */
%token SYMB8 /* -> */
%token SYMB9 /* ( */
%token SYMB10 /* ) */
%token SYMB11 /* | */
%token SYMB12 /* < */
%token SYMB13 /* > */
%token SYMB14 /* <= */
%token SYMB15 /* >= */
%token SYMB16 /* ! */
%token SYMB17 /* / */
%token SYMB18 /* + */
%token SYMB19 /* * */
%token SYMB20 /* :: */
%token SYMB21 /* - */
%token SYMB22 /* <- */
%token SYMB23 /* @Seq */
%token SYMB24 /* @App */
%token SYMB25 /* @Let */
%token SYMB26 /* @Letrec */
%token SYMB27 /* @Abs */
%token SYMB28 /* @Cond */
%token SYMB29 /* @SelectFrom */
%token SYMB30 /* @From */
%token SYMB31 /* @SelectFromWhere */
%token SYMB32 /* @FromWhere */
%token SYMB33 /* @Equate */
%token SYMB34 /* @CompLT */
%token SYMB35 /* @CompGT */
%token SYMB36 /* @CompLTE */
%token SYMB37 /* @CompGTE */
%token SYMB38 /* @Unquote */
%token SYMB39 /* @Newprompt */
%token SYMB40 /* @Suspend */
%token SYMB41 /* @Release */
%token SYMB42 /* @SuspendSub */
%token SYMB43 /* @Divide */
%token SYMB44 /* @Add */
%token SYMB45 /* @Multiply */
%token SYMB46 /* @Juxtapose */
%token SYMB47 /* @Negate */
%token SYMB48 /* ` */
%token SYMB49 /* ' */
%token SYMB50 /* [ */
%token SYMB51 /* ] */
%token SYMB52 /* << */
%token SYMB53 /* >> */
%token SYMB54 /* & */
%token SYMB55 /* => */
%token SYMB56 /* ~ */
%token SYMB57 /* :pwd */
%token SYMB58 /* :cd */
%token SYMB59 /* :exit */
%token SYMB60 /* :type */
%token SYMB61 /* :desugar */
%token SYMB62 /* :parse */
%token SYMB63 /* , */

%token TOK_EOF
%token <string> TOK_Ident
%token <string> TOK_String
%token <int> TOK_Integer
%token <float> TOK_Double
%token <char> TOK_Char
%token <string> TOK_UIdent
%token <string> TOK_LIdent
%token <string> TOK_Wild

%start pRequest pExpr pArithmeticExpr pBinding pPattern pVariation pLyst pValue pDuality pSymbol pTypeT pTypeAbstraction pTypeApplication pTypeVar pStructureType pGType pForm pFormFormals pFormVar pGForm pOuterShellRequest pInnerShellRequest pExpr_list pPattern_list pBinding_list pTypeVar_list pTypeT_list pFormVar_list
%type <Abscacao.request> pRequest
%type <Abscacao.expr> pExpr
%type <Abscacao.arithmeticExpr> pArithmeticExpr
%type <Abscacao.binding> pBinding
%type <Abscacao.pattern> pPattern
%type <Abscacao.variation> pVariation
%type <Abscacao.lyst> pLyst
%type <Abscacao.value> pValue
%type <Abscacao.duality> pDuality
%type <Abscacao.symbol> pSymbol
%type <Abscacao.typeT> pTypeT
%type <Abscacao.typeAbstraction> pTypeAbstraction
%type <Abscacao.typeApplication> pTypeApplication
%type <Abscacao.typeVar> pTypeVar
%type <Abscacao.structureType> pStructureType
%type <Abscacao.gType> pGType
%type <Abscacao.form> pForm
%type <Abscacao.formFormals> pFormFormals
%type <Abscacao.formVar> pFormVar
%type <Abscacao.gForm> pGForm
%type <Abscacao.outerShellRequest> pOuterShellRequest
%type <Abscacao.innerShellRequest> pInnerShellRequest
%type <Abscacao.expr list> pExpr_list
%type <Abscacao.pattern list> pPattern_list
%type <Abscacao.binding list> pBinding_list
%type <Abscacao.typeVar list> pTypeVar_list
%type <Abscacao.typeT list> pTypeT_list
%type <Abscacao.formVar list> pFormVar_list


%%
pRequest : request TOK_EOF { $1 }
  | error { raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) };

pExpr : expr TOK_EOF { $1 }
  | error { raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) };

pArithmeticExpr : arithmeticExpr TOK_EOF { $1 }
  | error { raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) };

pBinding : binding TOK_EOF { $1 }
  | error { raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) };

pPattern : pattern TOK_EOF { $1 }
  | error { raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) };

pVariation : variation TOK_EOF { $1 }
  | error { raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) };

pLyst : lyst TOK_EOF { $1 }
  | error { raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) };

pValue : value TOK_EOF { $1 }
  | error { raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) };

pDuality : duality TOK_EOF { $1 }
  | error { raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) };

pSymbol : symbol TOK_EOF { $1 }
  | error { raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) };

pTypeT : typeT TOK_EOF { $1 }
  | error { raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) };

pTypeAbstraction : typeAbstraction TOK_EOF { $1 }
  | error { raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) };

pTypeApplication : typeApplication TOK_EOF { $1 }
  | error { raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) };

pTypeVar : typeVar TOK_EOF { $1 }
  | error { raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) };

pStructureType : structureType TOK_EOF { $1 }
  | error { raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) };

pGType : gType TOK_EOF { $1 }
  | error { raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) };

pForm : form TOK_EOF { $1 }
  | error { raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) };

pFormFormals : formFormals TOK_EOF { $1 }
  | error { raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) };

pFormVar : formVar TOK_EOF { $1 }
  | error { raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) };

pGForm : gForm TOK_EOF { $1 }
  | error { raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) };

pOuterShellRequest : outerShellRequest TOK_EOF { $1 }
  | error { raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) };

pInnerShellRequest : innerShellRequest TOK_EOF { $1 }
  | error { raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) };

pExpr_list : expr2_list TOK_EOF { $1 }
  | error { raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) };

pPattern_list : pattern_list TOK_EOF { $1 }
  | error { raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) };

pBinding_list : binding_list TOK_EOF { $1 }
  | error { raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) };

pTypeVar_list : typeVar_list TOK_EOF { $1 }
  | error { raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) };

pTypeT_list : type1_list TOK_EOF { $1 }
  | error { raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) };

pFormVar_list : formVar_list TOK_EOF { $1 }
  | error { raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) };


request : expr { Evaluation $1 } 
  | SYMB1 expr SYMB2 typeT { TypeCheck ($2, $4) }
  | SYMB3 expr SYMB2 form { ModelCheck ($2, $4) }
  | SYMB4 outerShellRequest { OuterShell $2 }
  | innerShellRequest { InnerShell $1 }
;

expr : expr SYMB5 expr1 { Sequence ($1, $3) } 
  | expr1 {  $1 }
;

expr1 : expr1 expr2_list SYMB6 { Application ($1, $2) } 
  | expr2 {  $1 }
;

expr2 : TOK_let pattern SYMB7 expr2 TOK_in expr3 { Supposition ($2, $4, $6) } 
  | TOK_let TOK_rec pattern SYMB7 expr2 TOK_in expr3 { Recurrence ($3, $5, $7) }
  | expr3 {  $1 }
;

expr3 : TOK_fun pattern SYMB8 expr4 { Abstraction ($2, $4) } 
  | expr4 {  $1 }
;

expr4 : TOK_if expr4 TOK_then expr5 TOK_else expr5 { Condition ($2, $4, $6) } 
  | TOK_from SYMB9 binding_list SYMB10 TOK_yield expr5 { Comprehension ($3, $6) }
  | TOK_from SYMB9 binding_list SYMB10 expr5 { Consolidation ($3, $5) }
  | TOK_from SYMB9 binding_list SYMB11 pattern_list SYMB10 TOK_yield expr5 { Filtration ($3, $5, $8) }
  | TOK_from SYMB9 binding_list SYMB11 pattern_list SYMB10 expr5 { Concentration ($3, $5, $7) }
  | expr5 SYMB7 expr5 { Equation ($1, $3) }
  | expr5 SYMB12 expr5 { ComparisonLT ($1, $3) }
  | expr5 SYMB13 expr5 { ComparisonGT ($1, $3) }
  | expr5 SYMB14 expr5 { ComparisonLTE ($1, $3) }
  | expr5 SYMB15 expr5 { ComparisonGTE ($1, $3) }
  | expr5 {  $1 }
;

expr5 : SYMB16 variation { Reflection $2 } 
  | TOK_newP { Acquisition  }
  | TOK_pushP expr5 expr5 { Suspension ($2, $3) }
  | TOK_takeSC expr5 expr5 { Release ($2, $3) }
  | TOK_pushSC expr5 expr5 { InnerSuspension ($2, $3) }
  | arithmeticExpr { Calculation $1 }
;

arithmeticExpr : arithmeticExpr SYMB17 arithmeticExpr1 { Division ($1, $3) } 
  | arithmeticExpr1 {  $1 }
;

arithmeticExpr1 : arithmeticExpr1 SYMB18 arithmeticExpr2 { Addition ($1, $3) } 
  | arithmeticExpr2 {  $1 }
;

arithmeticExpr2 : arithmeticExpr2 SYMB19 arithmeticExpr3 { Multiplication ($1, $3) } 
  | arithmeticExpr3 {  $1 }
;

arithmeticExpr3 : arithmeticExpr3 SYMB20 arithmeticExpr4 { Juxtaposition ($1, $3) } 
  | arithmeticExpr4 {  $1 }
;

arithmeticExpr4 : SYMB21 arithmeticExpr5 { Negation $2 } 
  | arithmeticExpr5 {  $1 }
;

arithmeticExpr5 : variation { Mention $1 } 
  | value { Actualization $1 }
  | SYMB9 expr SYMB10 { Aggregation $2 }
;

binding : pattern SYMB22 expr5 { Question ($1, $3) } 
;

pattern : symbol SYMB9 pattern_list SYMB10 { Element ($1, $3) } 
  | variation { Variable $1 }
  | value { Materialization $1 }
  | lyst { Procession $1 }
  | SYMB23 variation { PtnSequence $2 }
  | SYMB24 variation variation { PtnApplication ($2, $3) }
  | SYMB25 variation variation variation { PtnSupposition ($2, $3, $4) }
  | SYMB26 variation variation variation { PtnRecurrence ($2, $3, $4) }
  | SYMB27 variation variation { PtnAbstraction ($2, $3) }
  | SYMB28 variation variation variation { PtnCondition ($2, $3, $4) }
  | SYMB29 variation variation { PtnComprehend ($2, $3) }
  | SYMB30 variation variation { PtnConsolidate ($2, $3) }
  | SYMB31 variation variation variation { PtnFiltration ($2, $3, $4) }
  | SYMB32 variation variation variation { PtnConcentrate ($2, $3, $4) }
  | SYMB33 variation variation { PtnEquation ($2, $3) }
  | SYMB34 variation variation { PtnCompLT ($2, $3) }
  | SYMB35 variation variation { PtnCompGT ($2, $3) }
  | SYMB36 variation variation { PtnCompLTE ($2, $3) }
  | SYMB37 variation variation { PtnCompGTE ($2, $3) }
  | SYMB38 variation variation { PtnReflection ($2, $3) }
  | SYMB39 { PtnAcquisition  }
  | SYMB40 variation variation { PtnSuspension ($2, $3) }
  | SYMB41 variation variation { PtnRelease ($2, $3) }
  | SYMB42 variation variation { PtnInnerSuspend ($2, $3) }
  | SYMB43 variation variation { PtnDivision ($2, $3) }
  | SYMB44 variation variation { PtnAddition ($2, $3) }
  | SYMB45 variation variation { PtnMultiply ($2, $3) }
  | SYMB46 variation variation { PtnJuxtapose ($2, $3) }
  | SYMB47 variation variation { PtnNegate ($2, $3) }
;

variation : uIdent { Atomic $1 } 
  | wild { Abandon $1 }
  | SYMB48 expr SYMB49 { Transcription $2 }
;

lyst : SYMB50 SYMB51 { Empty  } 
  | SYMB50 pattern_list SYMB51 { Enum $2 }
  | SYMB50 pattern_list SYMB11 lyst SYMB51 { Cons ($2, $4) }
  | SYMB50 pattern_list SYMB11 variation SYMB51 { ConsV ($2, $4) }
;

value : duality { BooleanLiteral $1 } 
  | string { StringLiteral $1 }
  | int { IntegerLiteral $1 }
  | float { DoubleLiteral $1 }
  | SYMB52 expr SYMB53 { Reification $2 }
;

duality : TOK_true { Verity  } 
  | TOK_false { Absurdity  }
;

symbol : lIdent { Tag $1 } 
;

typeT : typeT SYMB19 type1 { ProductType ($1, $3) } 
  | type1 {  $1 }
;

type1 : typeAbstraction { AbstractionType $1 } 
  | typeApplication { ApplicationType $1 }
  | type2 {  $1 }
;

type2 : type2 SYMB8 type3 { FunctionType ($1, $3) } 
  | type3 {  $1 }
;

type4 : lIdent { UserDefinedType $1 } 
  | gType { GroundType $1 }
  | structureType { StructuralType $1 }
;

type3 : type4 {  $1 } 
;

typeAbstraction : SYMB9 typeVar_list SYMB10 type4 { TypeListFormals ($2, $4) } 
;

typeApplication : SYMB50 type1_list SYMB51 type4 { TypeListActuals ($2, $4) } 
;

typeVar : SYMB49 lIdent { AtomicTypeVar $2 } 
  | SYMB48 type2 { TermTypeVar $2 }
;

structureType : SYMB16 type4 { ReflectionType $2 } 
  | SYMB9 typeT SYMB10 { AggregationType $2 }
;

gType : TOK_bool { BooleanType  } 
  | TOK_string { StringType  }
  | TOK_int { IntegerType  }
  | TOK_float { FloatType  }
;

form : form SYMB54 form1 { ConjunctiveForm ($1, $3) } 
  | form1 {  $1 }
;

form1 : form1 SYMB18 form2 { DisjunctiveForm ($1, $3) } 
  | form2 {  $1 }
;

form2 : form2 SYMB55 form3 { ImplicativeForm ($1, $3) } 
  | SYMB9 form SYMB10 {  $2 }
;

form3 : form3 SYMB19 form4 { ProductiveForm ($1, $3) } 
;

form4 : formFormals form5 { AbstractionForm ($1, $2) } 
;

form5 : SYMB12 form5 SYMB13 form6 { ProbativeForm ($2, $4) } 
;

form6 : TOK_rec uIdent SYMB8 form6 { RecursiveForm ($2, $4) } 
  | SYMB16 form6 { ReflectionForm $2 }
  | SYMB56 form6 { NegativeForm $2 }
  | uIdent { ReferentialForm $1 }
  | lIdent { UserDefinedForm $1 }
  | gForm { GroundForm $1 }
;

formFormals : formVar { FormOneFormal $1 } 
  | SYMB9 formVar_list SYMB10 { FormListFormals $2 }
;

formVar : SYMB49 lIdent { AtomicFormVar $2 } 
  | SYMB48 form2 { TermFormVar $2 }
;

gForm : TOK_T { VerityForm  } 
  | TOK_F { AbsurdityForm  }
  | TOK_bool { BooleanForm  }
  | TOK_string { StringForm  }
  | TOK_int { IntegerForm  }
  | TOK_float { FloatForm  }
;

outerShellRequest : string { EscapeRequest $1 } 
  | SYMB57 { PwdRequest  }
  | SYMB58 { CdRequest  }
;

innerShellRequest : SYMB59 { ExitRequest  } 
  | SYMB60 expr { TypeRequest $2 }
  | SYMB61 expr { DesugarRequest $2 }
  | SYMB62 expr { ParseRequest $2 }
;

expr2_list : expr2 { (fun x -> [x]) $1 } 
  | expr2 expr2_list { (fun (x,xs) -> x::xs) ($1, $2) }
;

pattern_list : pattern { (fun x -> [x]) $1 } 
  | pattern SYMB63 pattern_list { (fun (x,xs) -> x::xs) ($1, $3) }
;

binding_list : /* empty */ { []  } 
  | binding { (fun x -> [x]) $1 }
  | binding SYMB63 binding_list { (fun (x,xs) -> x::xs) ($1, $3) }
;

typeVar_list : typeVar { (fun x -> [x]) $1 } 
  | typeVar SYMB63 typeVar_list { (fun (x,xs) -> x::xs) ($1, $3) }
;

type1_list : type1 { (fun x -> [x]) $1 } 
  | type1 SYMB63 type1_list { (fun (x,xs) -> x::xs) ($1, $3) }
;

formVar_list : formVar { (fun x -> [x]) $1 } 
  | formVar SYMB63 formVar_list { (fun (x,xs) -> x::xs) ($1, $3) }
;


string : TOK_String { $1 };
int :  TOK_Integer  { $1 };
float : TOK_Double  { $1 };
uIdent : TOK_UIdent { UIdent ($1)};
lIdent : TOK_LIdent { LIdent ($1)};
wild : TOK_Wild { Wild ($1)};


