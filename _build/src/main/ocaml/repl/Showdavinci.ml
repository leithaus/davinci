(* show functions generated by the BNF converter *)

open Absdavinci

(* use string buffers for efficient string concatenations *)
type showable = Buffer.t -> unit

let show (s : showable) : string = 
    let init_size = 16 in (* you may want to adjust this *)
    let b = Buffer.create init_size in
    s b;
    Buffer.contents b
    
let emptyS : showable = fun buf -> ()

let c2s (c:char) : showable = fun buf -> Buffer.add_char buf c
let s2s (s:string) : showable = fun buf -> Buffer.add_string buf s

let ( >> ) (s1 : showable) (s2 : showable) : showable = fun buf -> s1 buf; s2 buf

let showChar (c:char) : showable = fun buf -> 
    Buffer.add_string buf ("'" ^ Char.escaped c ^ "'")

let showString (s:string) : showable = fun buf -> 
    Buffer.add_string buf ("\"" ^ String.escaped s ^ "\"")

let showList (showFun : 'a -> showable) (xs : 'a list) : showable = fun buf -> 
    let rec f ys = match ys with
        [] -> ()
      | [y] -> showFun y buf
      | y::ys -> showFun y buf; Buffer.add_string buf "; "; f ys 
    in
        Buffer.add_char buf '[';
        f xs;
        Buffer.add_char buf ']'


let showInt (i:int) : showable = s2s (string_of_int i)
let showFloat (f:float) : showable = s2s (string_of_float f)

let rec showUIdent (UIdent i) : showable = s2s "UIdent " >> showString i

let rec showLIdent (LIdent i) : showable = s2s "LIdent " >> showString i

let rec showWild (Wild i) : showable = s2s "Wild " >> showString i


let rec showAgent (e:agent) : showable = match e with
       Composition agents -> s2s "Composition" >> c2s ' ' >> c2s '(' >> showList showAgent agents >> c2s ')'
  |    Superposition guardedagents -> s2s "Superposition" >> c2s ' ' >> c2s '(' >> showList showGuardedAgent guardedagents >> c2s ')'
  |    Replication channel -> s2s "Replication" >> c2s ' ' >> c2s '(' >> showChannel channel >> c2s ')'
  |    Reception (bindings, agent) -> s2s "Reception" >> c2s ' ' >> c2s '(' >> showList showBinding bindings  >> s2s ", " >>  showAgent agent >> c2s ')'
  |    Filtration (bindings, patterns, agent) -> s2s "Filtration" >> c2s ' ' >> c2s '(' >> showList showBinding bindings  >> s2s ", " >>  showList showPattern patterns  >> s2s ", " >>  showAgent agent >> c2s ')'
  |    Intimation (variation, concretion) -> s2s "Intimation" >> c2s ' ' >> c2s '(' >> showVariation variation  >> s2s ", " >>  showConcretion concretion >> c2s ')'
  |    Transmission (variation, concretion) -> s2s "Transmission" >> c2s ' ' >> c2s '(' >> showVariation variation  >> s2s ", " >>  showConcretion concretion >> c2s ')'
  |    Actualization value -> s2s "Actualization" >> c2s ' ' >> c2s '(' >> showValue value >> c2s ')'


and showGuardedAgent (e:guardedAgent) : showable = match e with
       Injection (pattern, agent) -> s2s "Injection" >> c2s ' ' >> c2s '(' >> showPattern pattern  >> s2s ", " >>  showAgent agent >> c2s ')'


and showAbstraction (e:abstraction) : showable = match e with
       Applicant (variation, agent) -> s2s "Applicant" >> c2s ' ' >> c2s '(' >> showVariation variation  >> s2s ", " >>  showAgent agent >> c2s ')'


and showConcretion (e:concretion) : showable = match e with
       Applicand information -> s2s "Applicand" >> c2s ' ' >> c2s '(' >> showInformation information >> c2s ')'


and showBinding (e:binding) : showable = match e with
       Question (pattern0, channel, pattern) -> s2s "Question" >> c2s ' ' >> c2s '(' >> showPattern pattern0  >> s2s ", " >>  showChannel channel  >> s2s ", " >>  showPattern pattern >> c2s ')'
  |    Interrogation (pattern0, channel, pattern) -> s2s "Interrogation" >> c2s ' ' >> c2s '(' >> showPattern pattern0  >> s2s ", " >>  showChannel channel  >> s2s ", " >>  showPattern pattern >> c2s ')'


and showPattern (e:pattern) : showable = match e with
       Element (symbol, patterns) -> s2s "Element" >> c2s ' ' >> c2s '(' >> showSymbol symbol  >> s2s ", " >>  showList showPattern patterns >> c2s ')'
  |    Variable variation -> s2s "Variable" >> c2s ' ' >> c2s '(' >> showVariation variation >> c2s ')'
  |    Materialization value -> s2s "Materialization" >> c2s ' ' >> c2s '(' >> showValue value >> c2s ')'
  |    Procession lyst -> s2s "Procession" >> c2s ' ' >> c2s '(' >> showLyst lyst >> c2s ')'


and showChannel (e:channel) : showable = match e with
       Identification lident -> s2s "Identification" >> c2s ' ' >> c2s '(' >> showLIdent lident >> c2s ')'
  |    Nomination variation -> s2s "Nomination" >> c2s ' ' >> c2s '(' >> showVariation variation >> c2s ')'
  |    Transcription agent -> s2s "Transcription" >> c2s ' ' >> c2s '(' >> showAgent agent >> c2s ')'


and showSymbol (e:symbol) : showable = match e with
       Tag lident -> s2s "Tag" >> c2s ' ' >> c2s '(' >> showLIdent lident >> c2s ')'


and showVariation (e:variation) : showable = match e with
       Atomic uident -> s2s "Atomic" >> c2s ' ' >> c2s '(' >> showUIdent uident >> c2s ')'


and showInformation (e:information) : showable = match e with
       Indirection variation -> s2s "Indirection" >> c2s ' ' >> c2s '(' >> showVariation variation >> c2s ')'
  |    Reflection agent -> s2s "Reflection" >> c2s ' ' >> c2s '(' >> showAgent agent >> c2s ')'


and showLyst (e:lyst) : showable = match e with
       Empty  -> s2s "Empty" 
  |    Enum patterns -> s2s "Enum" >> c2s ' ' >> c2s '(' >> showList showPattern patterns >> c2s ')'
  |    Cons (patterns, lyst) -> s2s "Cons" >> c2s ' ' >> c2s '(' >> showList showPattern patterns  >> s2s ", " >>  showLyst lyst >> c2s ')'
  |    ConsV (patterns, variation) -> s2s "ConsV" >> c2s ' ' >> c2s '(' >> showList showPattern patterns  >> s2s ", " >>  showVariation variation >> c2s ')'


and showValue (e:value) : showable = match e with
       BooleanLiteral duality -> s2s "BooleanLiteral" >> c2s ' ' >> c2s '(' >> showDuality duality >> c2s ')'
  |    StringLiteral str -> s2s "StringLiteral" >> c2s ' ' >> c2s '(' >> showString str >> c2s ')'
  |    IntegerLiteral n -> s2s "IntegerLiteral" >> c2s ' ' >> c2s '(' >> showInt n >> c2s ')'
  |    DoubleLiteral d -> s2s "DoubleLiteral" >> c2s ' ' >> c2s '(' >> showFloat d >> c2s ')'
  |    Reification agent -> s2s "Reification" >> c2s ' ' >> c2s '(' >> showAgent agent >> c2s ')'


and showDuality (e:duality) : showable = match e with
       Verity  -> s2s "Verity" 
  |    Absurdity  -> s2s "Absurdity" 



